 

create table cliente(
	nome VARCHAR(30),
	sexo CHAR(1),
	email VARCHAR(30),
	cpf INT(11),
	telefone VARCHAR(30),
	endereco VARCHAR(100)

);

DESC cliente;

INSERT INTO CLIENTE VALUES('JOAO','M','JOAO@GMAIL.COM',62315567,'085988776655','MAIA LACERDA - ESTACIO - RIO DE JANEIRO - RJ');


INSERT INTO CLIENTE(NOME,SEXO,ENDERECO,TELEFONE,CPF) VALUES('LILIAN','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','947785696',887774856);

select nome as cliente, sexo, email from cliente;


select nome, sexo from cliente
where sexo = 'm';

select nome, sexo from cliente
where endereco like '%RJ';

select nome, sexo from cliente
where endereco like 'MAIA LACERDA%';


/* primeiro exercício */

CREATE DATABASE LIVRARIA;

CREATE TABLE LIVROS(
		LIVRO VARCHAR(100),
		AUTOR VARCHAR(100),
		SEXO CHAR(1),
		PAGINAS INT(5),
		EDITORA VARCHAR(30),
		VALOR FLOAT(10,2),
		UF CHAR(2),
		ANO INT(4)
	);
	
/* primeria questão */
select * from livros;

/* segunda questão */
select livro, editora from livros;

/* terceira questão */
select livro, uf from livros
where sexo = 'm';

/* quarta questão */
select livro, paginas from livros
where sexo = 'f';

/* quinta questão */
SELECT livro, valor from livros
where UF = 'SP';

/* sexta questão extra*/
SELECT AUTOR, SEXO
FROM LIVROS
WHERE 
SEXO = 'M' AND (UF = 'SP' OR UF = 'RJ'); 

select COUNT(*) as "Quantidade de registros da tabala"
FROM cliente;

/* contar dentro do banco de dados*/
SELECT SEXO, COUNT(*)
FROM CLIENTE
GROUP BY SEXO;



/* SEGUNDA ATIVIDADE*/
/* PARA CONTAR AS COISAS PARA FAZER A ATIVIDADE */
select count(*)
from funcionarios
where departamento= 'filmes';

/* PRIMEIA QUESTÃO */
select idFuncionario, nome, departamento from funcionarios
where departamento = 'roupas' or departamento = 'filmes';

/* SEGUNDA QUESTÃO */
select nome, departamento, sexo, email from funcionarios
where
(departamento = 'lar' and sexo = 'feminino')
or 
(departamento = 'filmes' and sexo = 'feminino')
ORDER BY 2;

/* TECEIRA QUESTÃO */
select nome, departamento, sexo from funcionarios
where sexo = 'masculino' or departamento = 'jardim';


/* TUDO DE NOVO, SÓ QUE CERTO */
create database comercio;

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	SEXO ENUM('M','F') NOT NULL,
	EMAIL VARCHAR(50) UNIQUE,
	CPF VARCHAR(15) UNIQUE
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM('RES', 'COM', 'CELL') NOT NULL,
	NUMERO VARCHAR(20) NOT NULL,
	ID_CLIENTE INT,
	FOREIGN KEY(ID_CLIENTE)
	REFERENCES CLIENTE(IDCLIENTE)
);

CREATE TABLE ENDERECO(
	IDENDERECO INT PRIMARY KEY AUTO_INCREMENT,
	PAIS VARCHAR(20) NOT NULL,
	ESTADO CHAR(2) NOT NULL,
	CIDADE VARCHAR(20) NOT NULL,
	BAIRRO VARCHAR(20) NOT NULL,
	RUA VARCHAR(20) NOT NULL,
	CASA VARCHAR(20) NOT NULL,
	ID_CLIENTE INT UNIQUE,
	FOREIGN KEY(ID_CLIENTE)
	REFERENCES CLIENTE(IDCLIENTE)
);

INSERT INTO ENDERECO VALUES(NULL,'BRASIL', 'FE', 'FEZINHA', 'CAPONGA', 'SUA MAE','89',4);
INSERT INTO ENDERECO VALUES(NULL,'BRASIL', 'CE', 'FORTALEZA', 'MARACANAU', 'RUA CAPITAO HERMES','69A',1);
INSERT INTO ENDERECO VALUES(NULL,'ARGENTINA', 'PI', 'POLINOMIUS', 'HH', 'RUA DA CACHORRA MAGA','666Q',3);
INSERT INTO ENDERECO VALUES(NULL,'UEA', 'US', 'MANJERICAO', 'PRIMA', 'RUA NEGAL','AA11',2);
INSERT INTO ENDERECO VALUES(NULL,'PORTUGAL', 'IP', ' NOBRE', 'LÁ DE CIMA', 'RUA NEGATIBO','6677',6);
INSERT INTO ENDERECO VALUES(NULL,'AFEGANISTÃO', 'PA', 'NEGADO', 'VILA DA FOLHA', '13C','650',5);

INSERT INTO TELEFONE VALUES(NULL,'CELL','78458743',5);
INSERT INTO TELEFONE VALUES(NULL,'RES','56576876',5);
INSERT INTO TELEFONE VALUES(NULL,'CELL','87866896',1);
INSERT INTO TELEFONE VALUES(NULL,'COM','54768899',2);
INSERT INTO TELEFONE VALUES(NULL,'RES','99667587',1);
INSERT INTO TELEFONE VALUES(NULL,'CELL','78989765',3);
INSERT INTO TELEFONE VALUES(NULL,'CELL','99766676',3);
INSERT INTO TELEFONE VALUES(NULL,'COM','66687899',1);
INSERT INTO TELEFONE VALUES(NULL,'RES','89986668',5);
INSERT INTO TELEFONE VALUES(NULL,'CELL','88687909',2);

-- UNIR 3 TABELAS, PRECISA COLOCAR OS 'PONTOS' POR QUE NÃO PODE REPETIR O NOME DAS COLUNAS

SELECT CLIENTE.NOME, CLIENTE.SEXO, ENDERECO.BAIRRO, ENDERECO.CIDADE, TELEFONE.TIPO, TELEFONE.NUMERO
FROM CLIENTE 
INNER JOIN ENDERECO
ON CLIENTE.IDCLIENTE = ENDERECO.ID_CLIENTE
INNER JOIN TELEFONE
ON CLIENTE.IDCLIENTE = TELEFONE.ID_CLIENTE;

--AQUI SÓ TEM UMA LETRA ANTES DOS PONTOS POIS COLOCAMOS APELIDOS EM CADA UMA DAS TABELAS

SELECT C.NOME, C.SEXO, E.BAIRRO, E.CIDADE, T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E 
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T 
ON C.IDCLIENTE = T.ID_CLIENTE;
-------------------------------------------------------------------------

-- EXERCICIOS DML --

-- PRIMERIA QUESTÃO --
SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF, 
	   E.RUA, E.BAIRRO, E.CIDADE, E.ESTADO, 
	   T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
	ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
	ON C.IDCLIENTE = T.ID_CLIENTE;

-- SEGUNDA QUESTÃO --
SELECT C.NOME, C.SEXO, E.BAIRRO, T.NUMERO
	FROM CLIENTE C
	INNER JOIN ENDERECO E
		ON C.IDCLIENTE = E.ID_CLIENTE
	INNER JOIN TELEFONE T
		ON C.IDCLIENTE = T.ID_CLIENTE
WHERE SEXO = 'M';

-- TERCEIRA QUESTÃO --
 SELECT SEXO, COUNT(*)
    FROM CLIENTE
    GROUP BY SEXO;

-- QUARTA QUESTÃO (IMCOMPLETA POIS CHAMA MAIS RESULTADOS DO QUE O CERTO --
SELECT C.IDCLIENTE, C.EMAIL, C.NOME, C.SEXO, T.TIPO, E.BAIRRO, E.CIDADE
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE SEXO = 'F'
AND BAIRRO = 'CENTRO' AND CIDADE = 'RIO DE JANEIRO'
AND (TIPO = 'RES' OR TIPO = 'COM');

/* PARA UMA CAMPANHA DE PRODUTOS DE BELEZA, O COMERCIAL SOLICITOU UM
RELATÓRIO COM O NOME, EMAIL E TELEFONE CELULAR 
 DAS MULHERES QUE MORAM NO ESTADO DE SÃO PAULO 
VOCÊ TERÁ QUE PASSAR A QUERY PARA GERAR O RELATORIO PARA
O PROGRAMADOR */

SELECT C.NOME, C.EMAIL, T.NUMERO AS CELULAR
FROM CLIENTE C
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
WHERE TIPO = 'CEL'
AND SEXO = 'F'
AND ESTADO = 'SP';

/* PARA UMA CAMPANHA DE MARKETING, O SETOR SOLICITOU UM
RELATÓRIO COM O NOME, EMAIL E TELEFONE CELULAR 
DOS CLIENTES QUE MORAM NO ESTADO DO RIO DE JANEIRO 
VOCÊ TERÁ QUE PASSAR A QUERY PARA GERAR O RELATORIO PARA
O PROGRAMADOR */

SELECT C.NOME, C.EMAIL, T.NUMERO AS CELULAR
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE TIPO = 'CEL'
AND ESTADO = 'RJ';

IFNULL() -- SE NULO, PRECISA PASSAR O QUE VAI APARECER CASO O VALOR ESTEJA EM NULO

SELECT  C.NOME, 
		IFNULL(C.EMAIL,'SEM EMAIL CADASTRADO') 'AS EMAIL',
		E.ESTADO, 
		T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

--VIEW (GUARDAR COMANDOS PARA NÃO FICAR FAZENDO QUERY FEITO BESTA)

CREATE VIEW V_RELATORIO AS
SELECT  C.NOME, 
		C.SEXO, 
		IFNULL(C.EMAIL,'CLIENTE SEM EMAIL') AS "E-MAIL", 
		T.TIPO, 
		T.NUMERO, 
		E.BAIRRO, 
		E.CIDADE, 
		E.ESTADO
FROM CLIENTE C 
INNER JOIN TELEFONE T 
ON C.IDCLIENTE = T.ID_CLIENTE 
INNER JOIN ENDERECO E 
ON C.IDCLIENTE = E.ID_CLIENTE;

-- 'V_' PARA DIZER QUE ELE É UM VIEW POIS QUANDO FOR DAR UM SHOW, ELE APARECE JUNTO DAS TABLES

-- forma massa de diminuir os trabalhos na hora de fazer um query, colocando um filtro em um view pronto:
SELECT NOME, NUMERO, ESTADO
FROM V_RELATORIO;

/* OBS: E POSSÍVEL FAZER UPDATES EM VIEWS COM JOINS, POREM NÃO É POSSÍVEL DELETAR NEM ADICIONAR SE TIVER JOINS */
/* OBS: EM VIEWS QUE NÃO TEM O JOIN É POSSÍVEL FAZER OS 3 SEM RESTRIÇÕES */


CREATE PROCEDURE CONTA(NUMERO1 INT, NUMERO2 INT)
BEGIN
	
	SELECT NUMERO1 + NUMERO2 AS CONTA;

END
$

CALL CONTA(100,50)$
CALL CONTA(345634,4354)$
CALL CONTA(55654,56760)$
CALL CONTA(45646,6766)$


DELIMITER #

STATUS

CREATE PROCEDURE CAD_CURSO(P_NOME VARCHAR(30),
						   						P_HORAS INT(30),
						   						P_PRECO  FLOAT(10,2))
BEGIN
	
	INSERT INTO CURSOS VALUES(NULL,P_NOME,P_HORAS,P_PRECO);

END
#

 

CALL CAD_CURSO('BI SQL SERVER',35,3000.00);
CALL CAD_CURSO('POWER BI',20,1000.00);
CALL CAD_CURSO('TABLEAU',30,1200.00);


/* CRIAR UMA PROCEDURE PARA CONSULTAR CURSOS */

DELIMITER #

CREATE PROCEDURE CONSULT_CURSOS()
BEGIN
	SELECT * FROM CURSOS;
END
#


/* A 31 - SUBQUERIES

VENDEDOR QUE VENDEU MENOS EM MARCO
E O SEU NOME */

SELECT NOME, MARCO FROM VENDEDORES
WHERE MARCO = (SELECT MIN(MARCO) FROM VENDEDORES); -- O QUE ESTÁ ENTRE PARENTESE SERÁ RESOLVIDO PRIMEIRO!

/* A32 - OPERACOES EM LINHA (NÃO É POSSÍVEL FAZER EM LINHA, POR ISSO PRECISAMOS FAZER UMA GAMBIARRA*/ 

SELECT * FROM VENDEDORES;

SELECT NOME,
	   JANEIRO,
	   FEVEREIRO,
	   MARCO,
	   (JANEIRO+FEVEREIRO+MARCO) AS "TOTAL",
	   TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/3,2) AS "MEDIA"
	   FROM VENDEDORES;

-- CRIAR TABELAS DA MANEIRA CERTA:
-- PRIMEIRO CRIAMOS AS TABELAS ISOLADAMENTE, PARA DEPOIS FAZERMOS ALTERAÇÕES COM AS REGRAS QUE VÃO REGER NOSSA TABELA


CREATE TABLE CLIENTE(
	IDCLIENTE INT,
	NOME VARCHAR(30) NOT NULL
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT,
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_CLIENTE INT
);

ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY(IDCLIENTE);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

-- EM ALTER TABLE ESTAMOS LINCANDO A NOSSA FK (FOREIGN KEY) NA TABELA TELEFONE A NOSSA TABELA CLIENTE ATRAVEZ DA PK (PRIMARY KEY).


-- Sr. José quer modernizar a sua oficina, e por enquanto, cadastrar os carros que entram para realizar serviços e os seus respectivos donos. Sr. José mencionou que cada cliente possui apenas um carro. Um carro possui uma marca. Sr. José também quer saber as cores dos carros para ter idéia de qual tinta comprar, e informa que um carro pode ter mais de uma cor. Sr José necessita armazenar os telefones dos clientes, mas não quer que eles sejam obrigatórios.

-- criação da banco de dados

CREATE DATABASE OFICINA;

USE OFICINA;


-- criando as tabelas
CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	SEXO ENUM('M','F') NOT NULL,
	ID_CARRO INT UNIQUE
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM('CEL','RES','COM') NOT NULL,
	NUMERO VARCHAR(30) NOT NULL,
	ID_CLIENTE INT 
);

CREATE TABLE MARCA(
	IDMARCA INT PRIMARY KEY AUTO_INCREMENT,
	MARCA VARCHAR(30) UNIQUE
);

CREATE TABLE CARRO(
	IDCARRO INT PRIMARY KEY AUTO_INCREMENT,
	MODELO VARCHAR(30) NOT NULL,
	PLACA VARCHAR(30) NOT NULL UNIQUE,
	ID_MARCA INT
);

CREATE TABLE COR(
	IDCOR INT PRIMARY KEY AUTO_INCREMENT,
	COR VARCHAR(30) UNIQUE
);

CREATE TABLE CARRO_COR(
	ID_CARRO INT,
	ID_COR INT,
	PRIMARY KEY(ID_CARRO,ID_COR)
);

--colocando as regras

ALTER TABLE TELEFONE 
ADD CONSTRAINT FK_TELEFONE_CLIENTE
FOREIGN KEY(ID_CLIENTE)
REFERENCES CLIENTE(IDCLIENTE);


ALTER TABLE CLIENTE
ADD CONSTRAINT FK_CLIENTE_CARRO
FOREIGN KEY(ID_CARRO)
REFERENCES CARRO(IDCARRO);


ALTER TABLE CARRO
ADD CONSTRAINT FK_CARRO_MARCA
FOREIGN KEY(ID_MARCA)
REFERENCES MARCA(IDMARCA);


ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_COR
FOREIGN KEY(ID_COR)
REFERENCES COR(IDCOR);


ALTER TABLE CARRO_COR
ADD CONSTRAINT FK_CARRO
FOREIGN KEY(ID_CARRO)
REFERENCES CARRO(IDCARRO);

/* PREENCHER O BANCO COM NO MINIMO 10 CLIENTES */
-- começar pelo carro por que ele disse que era o certo!!
INSERT INTO CARRO VALUES(NULL,'')

show create cliente;

-- ele não ensinou como insere, vida que segue

-- trigger para fazer backup de quando excluimos algo das tabelas

CREATE TRIGGER BACKUP_USER
BEFORE DELETE ON USUARIO
FOR EACH ROW 
BEGIN
		
	INSERT INTO BKP_USUARIO VALUES
	(NULL,OLD.IDUSUARIO,OLD.NOME,OLD.LOGIN);
END
$

--(necessário criar outra tabela para fazer o backup, nesse caso ela se chama 'BKP_USUARIO')
--(no exemplo a cima é um backup lógico ou seja se eu perder o meu server, eu perco tudo já que são duas tabelas em um mesmo servidor.)

--INSERIR INFORMAÇAO EM UM BANCO DE DADOS ESTANDO EM OUTRO:

INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,1000,'TESTE',0.0);
-- ESTOU EM QUAL QUER OUTRO BANCO DE DADOS DO MEU SERVIDOR, COLOCANDO O 'BACKUP.' ESTOU INDICANDO QUE O NOME DO MEU BANDO DE DADOS SE CHAMA 'BACKUP' O QUE HÁ DEPOIS É O NOME DA TABELA E SEUS VALORES.
SELECT * FROM BACKUP.BKP_PRODUTO;
-- MESMA COISA FUNDA PARA O O SELECT.

-- BACKUP DE UM BANCO DE DADOS PARA OUTRO

CREATE TRIGGER BACKUP_PRODUTO
AFTER INSERT ON PRODUTO
FOR EACH ROW
BEGIN
	
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,NEW.IDPRODUTO,
	NEW.NOME,NEW.VALOR);

END
$

--coreção ai, colca para ser 'AFTER' pois há valores que só são colocados depois de inserir na tabela como no comando ALTO INCREMENT

-- TESTE PARA VER SE DEU BOM

INSERT INTO PRODUTO VALUES(NULL, 'SUA MAE DE TANGA', 900.00);

-- criando uma trigger, que guardar um valor de 'd' dentro da tabela de backup para sabermos que é um 'delete'
CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE ON LOJA.PRODUTO
FOR EACH ROW
BEGIN
	
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,
	OLD.NOME,OLD.VALOR,'D');

END
$

-- criando uma trigger, que guardar um valor de 'i' dentro da tabela de backup para sabermos que é um 'insert'

CREATE TRIGGER BACKUP_PRODUTO_IN
AFTER INSERT ON LOJA.PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL, NEW.IDPRODUTO, NEW.NOME, NEW.VALOR,'I');

END
$

-- criando uma trigger, que guardar um valor de 'U' dentro da tabela de backup para sabermos que é um 'UPDATE'

CREATE TRIGGER AUDIT_PROD
AFTER UPDATE ON PRODUTO
FOR EACH ROW
BEGIN

	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,
	OLD.VALOR,NEW.VALOR,NOW(),CURRENT_USER(),'U');
	
END
$

-- OBS: nesa trigger podemos notar que há mais espaços a serem preenchidos, pois fizemos algo mais completo, na tabela de backup temos informações a mais como: antigo valor, valor novo, quando e quem fez esses up dates.

/* A44 - AUTORELACIONAMENTO */

CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	HORAS INT,
	VALOR FLOAT(10,2),
	ID_PREREQ INT
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_PREREQ
FOREIGN KEY(ID_PREREQ) REFERENCES CURSOS(IDCURSO);

INSERT INTO CURSOS VALUES(NULL,'BD RELACIONAL',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'BUSINESS INTELLIGENCE',40,800.00,1);
INSERT INTO CURSOS VALUES(NULL,'RELATORIOS AVANCADOS',20,600.00,2);
INSERT INTO CURSOS VALUES(NULL,'LOGICA PROGRAM',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'RUBY',30,500.00,4);

SELECT * FROM CURSOS;

SELECT 
NOME,
VALOR,
HORAS,
WHERE ID_PREREQ = IDCURSO NOME
FROM CURSOS;

/* NOME, VALOR, HORAS E O NOME DO PRE REQUISITO DO CURSO */

SELECT 
C.NOME AS CURSO, 
C.VALOR AS VALOR, 
C.HORAS AS CARGA, 
IFNULL(P.NOME, "---") AS PREREQ
FROM CURSOS C LEFT JOIN CURSOS P
ON P.IDCURSO = C.ID_PREREQ;

/* A 45 - CURSORES */


CREATE DATABASE CURSORES;
USE CURSORES;

CREATE TABLE VENDEDORES(
	IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MAR INT
);

INSERT INTO VENDEDORES VALUES(NULL,'MAFRA',32432,242334,574545);
INSERT INTO VENDEDORES VALUES(NULL,'CLARA',65465,65443,653454);
INSERT INTO VENDEDORES VALUES(NULL,'JOAO',12432,65356,8756);
INSERT INTO VENDEDORES VALUES(NULL,'LILIAN',4567,9676,8765);
INSERT INTO VENDEDORES VALUES(NULL,'ANTONIO',3467,68756,99765);
INSERT INTO VENDEDORES VALUES(NULL,'GLORIA',54786,76889,7098);

SELECT * FROM VENDEDORES;

SELECT NOME, (JAN+FEV+MAR) AS TOTAL FROM VENDEDORES;
SELECT NOME, (JAN+FEV+MAR) AS TOTAL, (JAN+FEV+MAR)/3 AS MEDIA FROM VENDEDORES;

CREATE TABLE VEND_TOTAL(
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MAR INT,
	TOTAL INT,
	MEDIA INT
);

DELIMITER $

CREATE PROCEDURE INSEREDADOS()
BEGIN
		DECLARE FIM INT DEFAULT 0;
		DECLARE VAR1, VAR2, VAR3, VTOTAL, VMEDIA INT;
		DECLARE VNOME VARCHAR(50);
		
		DECLARE REG CURSOR FOR(
			SELECT NOME, JAN, FEV, MAR FROM VENDEDORES
		);
		
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIM = 1;
		
		OPEN REG;
		
		REPEAT
		
			FETCH REG INTO VNOME, VAR1, VAR2, VAR3;
			IF NOT FIM THEN
			
				SET VTOTAL = VAR1 + VAR2 + VAR3;
				SET VMEDIA = VTOTAL / 3;
				
				INSERT INTO VEND_TOTAL VALUES(VNOME,VAR1,VAR2,VAR3,VTOTAL,VMEDIA);
				
			END IF;
			
		UNTIL FIM END REPEAT;
		
		CLOSE REG;
END
$

SELECT * FROM VENDEDORES;
SELECT * FROM VEND_TOTAL;

DELIMITER ;

CALL INSEREDADOS();

INSERT INTO VENDEDORES VALUES(NULL,'LETICIA',656,3546,234545);
INSERT INTO VENDEDORES VALUES(NULL,'CELIA',6766,56556,65454);

SELECT * FROM VENDEDORES;
SELECT * FROM VEND_TOTAL;

DELETE FROM VEND_TOTAL;

CALL INSEREDADOS();



/* A47 SEGUNDA E TERCEIRAS FORMAS NORMAIS */

/*
	 PRIMEIRA FN
	 
	 ATOMICIDADE - UM CAMPO NAO PODE SER DIVISIVEL
	 UM CAMPO NAO PODE SER VETORIZADO
	 PK CHAVE PRIMARIA

*/

CREATE DATABASE CONSULTORIO;

CREATE TABLE PACIENTE(
	IDPACIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	NASCIMENTO DATE
);

CREATE TABLE MEDICO(
	IDMEDICO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	ESPECIALIDADE VARCHAR(30),
	FUNCIONARIO ENUM('S','N')
);

CREATE TABLE HOSPITAL(
	IDHOSPITAL INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	BAIRRO VARCHAR(30),
	CIDADE VARCHAR(30),
	ESTADO CHAR(2)
);

CREATE TABLE CONSULTA(
	IDCONSULTA INT PRIMARY KEY AUTO_INCREMENT,
	ID_PACIENTE INT,
	ID_MEDICO INT,
	ID_HOSPITAL INT,
	DATA DATETIME,
	DIAGNOSTICO VARCHAR(50)
);

CREATE TABLE INTERNACAO(
	IDINTERNACAO INT PRIMARY KEY AUTO_INCREMENT,
	ENTRADA DATETIME,
	QUARTO INT,
	SAIDA DATETIME,
	OBSERVACOES VARCHAR(50),	
	ID_CONSULTA INT UNIQUE
);

--OBS: DIGITAR AS REGRAS QUE ELE COLOCOU NO VIDEO E NÃO COLOCOU AQUI NO TEXTO!!
